#version 460

#ifndef LOCAL_SIZE
#define LOCAL_SIZE 256
#endif // LOCAL_SIZE

#ifdef COMET_VALIDATION_DEBUG_PRINTF_EXT
#extension GL_EXT_debug_printf : enable
#endif // COMET_VALIDATION_DEBUG_PRINTF_EXT

struct ProxyLocalData {
  vec3 localCenter;
  vec3 localMaxExtents;
  mat4 transform;
  uint skinningOffset;
};

struct ProxyInstance {
  uint proxyId;
  uint batchId;
};

struct IndirectProxy {
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
  uint proxyId;
  uint batchId;
};

#ifdef COMET_DEBUG_CULLING
struct DebugAabb {
  vec3 minExtents;
  vec3 maxExtents;
};
#endif // COMET_DEBUG_CULLING

#ifdef COMET_DEBUG_RENDERING
struct DebugData {
  uint visibleCount;
};
#endif // COMET_DEBUG_RENDERING

layout(local_size_x = LOCAL_SIZE) in;

layout(push_constant) uniform Constants { uint drawCount; }
constants;

layout(set = 0, binding = 0) uniform GlobalUbo {
  mat4 projection;
  mat4 view;
  vec4 ambientColor;
  vec3 viewPos;
}
globalUbo;

layout(std430, set = 2, binding = 0) readonly buffer InProxyLocalDatasSsbo {
  ProxyLocalData inProxyLocalDatas[];
};

layout(set = 2, binding = 1) buffer OutProxyIdsSsbo { uint outProxyIds[]; };

layout(set = 2, binding = 2) readonly buffer InProxyInstancesSsbo {
  ProxyInstance inProxyInstances[];
};

layout(set = 2, binding = 3) buffer InIndirectProxiesSsbo {
  IndirectProxy inIndirectProxies[];
};

#ifdef COMET_DEBUG_RENDERING
layout(std430, set = 2, binding = 64) buffer OutDebugDataSsbo {
  DebugData outDebugData;
};
#endif // COMET_DEBUG_RENDERING

#ifdef COMET_DEBUG_CULLING
layout(std430, set = 2, binding = 65) buffer OutDebugAabbSsbo {
  DebugAabb outDebugAabbs[];
};
#endif // COMET_DEBUG_CULLING

shared vec4 sharedFrustumPlanes[6];

vec4 generatePlateFromPoints(vec3 a, vec3 b, vec3 c) {
  vec3 normal = normalize(cross(b - a, c - a));
  float d = -dot(normal, a);
  return vec4(normal, d);
}

void generateFrustum(mat4 viewProjInverted) {
  // Normalized Device Coordinates corners.
  vec3 ndcCorners[8] =
      vec3[](vec3(-1, -1, -1), vec3(1, -1, -1), vec3(1, 1, -1), vec3(-1, 1, -1),
             vec3(-1, -1, 1), vec3(1, -1, 1), vec3(1, 1, 1), vec3(-1, 1, 1));

  vec3 worldCorners[8];

  // Unproject NDC corners into world space.
  for (int i = 0; i < 8; ++i) {
    vec4 world = viewProjInverted * vec4(ndcCorners[i], 1.0);

    // Perspective divide.
    worldCorners[i] = world.xyz / world.w;
  }

  sharedFrustumPlanes[0] =
      generatePlateFromPoints(worldCorners[0], worldCorners[1],
                              worldCorners[2]); // Near.

  sharedFrustumPlanes[1] = generatePlateFromPoints(
      worldCorners[4], worldCorners[7], worldCorners[6]); // Far

  sharedFrustumPlanes[2] =
      generatePlateFromPoints(worldCorners[0], worldCorners[3],
                              worldCorners[7]); // Left.

  sharedFrustumPlanes[3] =
      generatePlateFromPoints(worldCorners[1], worldCorners[5],
                              worldCorners[6]); // Right.

  sharedFrustumPlanes[4] =
      generatePlateFromPoints(worldCorners[3], worldCorners[2],
                              worldCorners[6]); // Top.

  sharedFrustumPlanes[5] =
      generatePlateFromPoints(worldCorners[0], worldCorners[4],
                              worldCorners[1]); // Bottom.
}

bool isAabbInOrOnPlane(vec4 plane, vec3 center, vec3 extents) {
  float radius = dot(extents, abs(plane.xyz));
  float signedDistance = dot(plane.xyz, center) + plane.w;
  return -radius <= signedDistance;
}

void generateGlobalAabb(vec3 localCenter, vec3 localExtents, mat4 transform,
                        out vec3 center, out vec3 extents) {
  vec3 localMin = localCenter - localExtents;
  vec3 localMax = localCenter + localExtents;
  mat3 basis = mat3(transform);
  vec3 worldMin = vec3(0.0);
  vec3 worldMax = vec3(0.0);

  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < 3; ++j) {
      float a = basis[j][i] * localMin[j];
      float b = basis[j][i] * localMax[j];
      if (a < b) {
        worldMin[i] += a;
        worldMax[i] += b;
      } else {
        worldMin[i] += b;
        worldMax[i] += a;
      }
    }
  }

  vec3 translation = transform[3].xyz;
  worldMin += translation;
  worldMax += translation;

  center = (worldMin + worldMax) * 0.5;
  extents = worldMax - center;
}

bool isVisible(uint proxyId) {
  ProxyLocalData data = inProxyLocalDatas[proxyId];

  vec3 center, extents;
  generateGlobalAabb(data.localCenter, data.localMaxExtents, data.transform,
                     center, extents);

#ifdef COMET_DEBUG_CULLING
  outDebugAabbs[proxyId].minExtents = center - extents;
  outDebugAabbs[proxyId].maxExtents = center + extents;
#endif // COMET_DEBUG_CULLING

  for (int i = 0; i < 6; ++i) {
    if (!isAabbInOrOnPlane(sharedFrustumPlanes[i], center, extents)) {
      return false;
    }
  }

  return true;
}

void main() {
  uint id = gl_GlobalInvocationID.x;

  if (id >= constants.drawCount) {
    return;
  }

  if (gl_LocalInvocationIndex == 0) {
    mat4 viewProj = globalUbo.projection * globalUbo.view;
    mat4 viewProjInverted = inverse(viewProj);
    generateFrustum(viewProjInverted);
  }

  barrier();

  uint proxyId = inProxyInstances[id].proxyId;

  if (!isVisible(proxyId)) {
    return;
  }

#ifdef COMET_DEBUG_RENDERING
  atomicAdd(outDebugData.visibleCount, 1);
#endif // COMET_DEBUG_RENDERING

  uint batchId = inProxyInstances[id].batchId;
  uint countIndex = atomicAdd(inIndirectProxies[batchId].instanceCount, 1);
  uint instanceIndex = inIndirectProxies[batchId].firstInstance + countIndex;

  outProxyIds[instanceIndex] = proxyId;
}
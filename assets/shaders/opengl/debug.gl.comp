#version 460

#ifndef LOCAL_SIZE
#define LOCAL_SIZE 256
#endif // LOCAL_SIZE

#ifdef COMET_VALIDATION_DEBUG_PRINTF_EXT
#extension GL_EXT_debug_printf : enable
#endif // COMET_VALIDATION_DEBUG_PRINTF_EXT

#ifdef COMET_DEBUG_CULLING
struct DebugAabb {
  vec3 minExtents;
  vec3 maxExtents;
};
#endif // COMET_DEBUG_CULLING

layout(local_size_x = LOCAL_SIZE) in;

#ifdef COMET_DEBUG_CULLING
layout(std430, binding = 75) readonly buffer InDebugAabbsSsbo {
  DebugAabb inDebugAabbs[];
};

layout(std430, binding = 76) buffer OutDebugLineVertexBuffer {
  vec4 outLineVertices[];
};

vec2 cubeEdges[12] = vec2[](vec2(0, 1), vec2(1, 2), vec2(2, 3), vec2(3, 0),
                            vec2(4, 5), vec2(5, 6), vec2(6, 7), vec2(7, 4),
                            vec2(0, 4), vec2(1, 5), vec2(2, 6), vec2(3, 7));

vec3 cubeVertices[8] =
    vec3[](vec3(0, 0, 0), vec3(1, 0, 0), vec3(1, 1, 0), vec3(0, 1, 0),
           vec3(0, 0, 1), vec3(1, 0, 1), vec3(1, 1, 1), vec3(0, 1, 1));
#endif // COMET_DEBUG_CULLING

uniform uint count;

void main() {
  uint proxyId = gl_GlobalInvocationID.x;

  if (proxyId >= count) {
    return;
  }

#ifdef COMET_DEBUG_CULLING
  DebugAabb aabb = inDebugAabbs[proxyId];
  vec3 worldCorners[8];

  for (int i = 0; i < 8; ++i) {
    worldCorners[i] = mix(aabb.minExtents, aabb.maxExtents, cubeVertices[i]);
  }

  for (int i = 0; i < 12; ++i) {
    uint vertexIndex = proxyId * 24 + i * 2;
    outLineVertices[vertexIndex] = vec4(worldCorners[int(cubeEdges[i].x)], 1.0);
    outLineVertices[vertexIndex + 1] =
        vec4(worldCorners[int(cubeEdges[i].y)], 1.0);
  }
#endif // COMET_DEBUG_CULLING
}
